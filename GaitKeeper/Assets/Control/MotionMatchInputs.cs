//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Control/MotionMatchInputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @MotionMatchInputs: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @MotionMatchInputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""MotionMatchInputs"",
    ""maps"": [
        {
            ""name"": ""Level Ground Walking"",
            ""id"": ""19137053-94a9-437b-9a85-a78f46262f6b"",
            ""actions"": [
                {
                    ""name"": ""Velocity"",
                    ""type"": ""Value"",
                    ""id"": ""add7fb24-69ac-4584-b7b6-27f8a0103339"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Heading"",
                    ""type"": ""Value"",
                    ""id"": ""b00d4946-bb18-4f15-8656-62be41088fbd"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ed3533e5-681c-4f55-83f3-9d592b54323d"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Velocity"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""238b49de-6c2b-4b29-8fd2-b6ce0988a033"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Heading"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Level Ground Walking
        m_LevelGroundWalking = asset.FindActionMap("Level Ground Walking", throwIfNotFound: true);
        m_LevelGroundWalking_Velocity = m_LevelGroundWalking.FindAction("Velocity", throwIfNotFound: true);
        m_LevelGroundWalking_Heading = m_LevelGroundWalking.FindAction("Heading", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Level Ground Walking
    private readonly InputActionMap m_LevelGroundWalking;
    private List<ILevelGroundWalkingActions> m_LevelGroundWalkingActionsCallbackInterfaces = new List<ILevelGroundWalkingActions>();
    private readonly InputAction m_LevelGroundWalking_Velocity;
    private readonly InputAction m_LevelGroundWalking_Heading;
    public struct LevelGroundWalkingActions
    {
        private @MotionMatchInputs m_Wrapper;
        public LevelGroundWalkingActions(@MotionMatchInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Velocity => m_Wrapper.m_LevelGroundWalking_Velocity;
        public InputAction @Heading => m_Wrapper.m_LevelGroundWalking_Heading;
        public InputActionMap Get() { return m_Wrapper.m_LevelGroundWalking; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(LevelGroundWalkingActions set) { return set.Get(); }
        public void AddCallbacks(ILevelGroundWalkingActions instance)
        {
            if (instance == null || m_Wrapper.m_LevelGroundWalkingActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_LevelGroundWalkingActionsCallbackInterfaces.Add(instance);
            @Velocity.started += instance.OnVelocity;
            @Velocity.performed += instance.OnVelocity;
            @Velocity.canceled += instance.OnVelocity;
            @Heading.started += instance.OnHeading;
            @Heading.performed += instance.OnHeading;
            @Heading.canceled += instance.OnHeading;
        }

        private void UnregisterCallbacks(ILevelGroundWalkingActions instance)
        {
            @Velocity.started -= instance.OnVelocity;
            @Velocity.performed -= instance.OnVelocity;
            @Velocity.canceled -= instance.OnVelocity;
            @Heading.started -= instance.OnHeading;
            @Heading.performed -= instance.OnHeading;
            @Heading.canceled -= instance.OnHeading;
        }

        public void RemoveCallbacks(ILevelGroundWalkingActions instance)
        {
            if (m_Wrapper.m_LevelGroundWalkingActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ILevelGroundWalkingActions instance)
        {
            foreach (var item in m_Wrapper.m_LevelGroundWalkingActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_LevelGroundWalkingActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public LevelGroundWalkingActions @LevelGroundWalking => new LevelGroundWalkingActions(this);
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    public interface ILevelGroundWalkingActions
    {
        void OnVelocity(InputAction.CallbackContext context);
        void OnHeading(InputAction.CallbackContext context);
    }
}
